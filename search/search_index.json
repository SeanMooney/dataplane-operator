{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"dataplane-operator","text":"<p>The dataplane-operator automates the deployment of an OpenStack dataplane. A dataplane is a collection of nodes that will be used for hosting OpenStack workloads. The dataplane-operator prepares the nodes with enough operating system configuration so that they are ready for hosting other required OpenStack services and workloads.</p> <p>See contributing for notes for developers and contributors, running the operator, building the documentation, etc.</p> <p>See design for details about the dataplane design.</p> <p>Deploying a DataPlane documents how to deploy a dataplane.</p> <p>The documentation source is kept within the dataplane-operator repo in the docs directory. The full generated documentation from that source is available at https://openstack-k8s-operators.github.io/dataplane-operator/.</p>"},{"location":"#license","title":"License","text":"<p>Copyright 2023.</p> <p>Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at</p> <pre><code>http://www.apache.org/licenses/LICENSE-2.0\n</code></pre> <p>Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.</p>"},{"location":"architecture/","title":"Architecture","text":"<p>Here is a diagram with the EDPM components:</p> <p></p>"},{"location":"common_configurations/","title":"Common Configurations","text":"<p>This page documents some of the common configurations that can be enabled through ansible variables.  The ansible variables that affect the configuration of the ansible executions are set in the <code>ansibleVars</code> field on the dataplane resources.</p> <p>The full set of ansible variables available for configuration are documented within each role in the edpm-ansible repository.</p>"},{"location":"common_configurations/#initial-bootstrap-command","title":"Initial bootstrap command","text":"<p>Variable: <code>edpm_bootstrap_command</code> Type: <code>string</code> Role: edpm_bootstrap</p> <p>The <code>edpm_bootstrap_command</code> variable can be used to pass a shell command(s) that will be executed as early as possible in the deployment as part of the <code>configure-network</code> service. If the <code>services</code> list is customized with services that execute prior to <code>configure-network</code> then the command(s) specified by <code>edpm_bootstrap_command</code> would run after the custom services.</p>"},{"location":"common_configurations/#using-edpm_bootstrap_command-for-system-registration","title":"Using <code>edpm_bootstrap_command</code> for system registration","text":"<p><code>edpm_bootstrap_command</code> can be used to perform system registration in order to enable needed package repositories. Choose a registration method (either Portal or Satellite) and refer to the provided links below for instructions to create the registration commands.</p>"},{"location":"common_configurations/#red-hat-customer-portal-registration","title":"Red Hat Customer Portal registration","text":"<p>The registration commands for the Red Hat Customer Portal are documented at https://access.redhat.com/solutions/253273.</p>"},{"location":"common_configurations/#red-hat-satellite-registration","title":"Red Hat Satellite registration","text":"<p>The registration commands for Red Hat Satellite version 6.13 are documented at https://access.redhat.com/documentation/en-us/red_hat_satellite/6.13/html-single/managing_hosts/index#Registering_Hosts_to_Server_managing-hosts.</p> <p>If not using Satellite version 6.13, then refer to the specific version of the documentation for the version of Satellite that is in use.</p>"},{"location":"common_configurations/#network-isolation","title":"Network Isolation","text":"<p>Network Isolation refers to the practice of separating network traffic by function, and configuring the networks on dataplane nodes. Nodes will need connectivity to various control plane services running on OCP. These services may be bound to different networks. Each of those networks needs to be configured as required on dataplane nodes.</p> <p>For further details on the network architecture of the control plane, see https://github.com/openstack-k8s-operators/docs/blob/main/networking.md.</p>"},{"location":"common_configurations/#configuring-networking-with-edpm_network_config","title":"Configuring networking with edpm_network_config","text":"<p>The edpm_network_config ansible role is responsible for configuring networking on dataplane nodes.</p> <p>The <code>edpm_network_config_template</code> variable specifies the path to an ansible template that describes the networking configuration to be applied. The template itself also contains variables that can be used to customize the networking configuration for a specific node (IP addresses, interface names, routes, etc). Templates provided with the edpm_network_config role are at https://github.com/openstack-k8s-operators/edpm-ansible/tree/main/roles/edpm_network_config/templates.</p> <p>Custom templates can also be used, but they must be avaialable to ansible in the ansible-runner image used by the <code>configure-network</code> service. Use the <code>ExtraMounts</code> field to mount custom content into the ansible-runner image.</p> <p>The following is an example <code>ansibleVars</code> field that shows defining the variables that configure the <code>edpm_network_config</code> role.</p> <pre><code>ansibleVars:\n  edpm_network_config_template: templates/single_nic_vlans/single_nic_vlans.j2\n  ctlplane_ip: 192.168.122.100\n  internal_api_ip: 172.17.0.100\n  storage_ip: 172.18.0.100\n  tenant_ip: 172.19.0.100\n  fqdn_internal_api: edpm-compute-0.example.com\n</code></pre> <p>This configuration would be applied by the <code>configure-network</code> service when it's executed.</p>"},{"location":"common_configurations/#network-attachment-definitions","title":"Network attachment definitions","text":"<p>The <code>NetworkAttachmentDefinition</code> resource is used to describe how pods can be attached to different networks. Network attachment definitions can be specified on the <code>OpenStackDataPlaneRole</code> and <code>OpenStackDataPlaneNode</code> resources using the <code>NetworkAttachments</code> field.</p> <p>The network attachments are used to describe which networks will be connected to the pod that is running ansible-runner. They do not enable networks on the dataplane nodes themselves. For example, adding the <code>internalapi</code> network attachment to <code>NetworkAttachments</code> means the ansible-runner pod will be connected to the <code>internalapi</code> network. This can enable scenarios where ansible needs to connect to different networks.</p>"},{"location":"composable_services/","title":"Composable services","text":"<p>Composable services with dataplane-operator provide a way for users to customize services that are deployed on dataplane nodes. It is possible to \"compose\" a set of services such that the dataplane deployment can be customized in whichever ways are needed.</p> <p>Composing services can take different forms. The interfaces in dataplane-operator allow for:</p> <ul> <li>Enabling/disabling services</li> <li>Ordering services</li> <li>Developing custom services</li> </ul> <p>For the purposes of the interfaces in dataplane-operator, a service is an ansible execution that manages a software deployment (installation, configuration, execution, etc) on dataplane nodes. The ansible content that makes up each service is defined by the service itself. Each service is a resource instance of the <code>OpenStackDataPlaneService</code> CRD.</p>"},{"location":"composable_services/#dataplane-operator-provided-services","title":"dataplane-operator provided services","text":"<p>dataplane-operator provides a default list of services that will be deployed on dataplane nodes. The services list is set on the <code>OpenStackDataPlaneRole</code> CRD.</p> <p>The default list of services as they will appear on the <code>services</code> field on an <code>OpenStackDataPlaneRole</code> spec is:</p> <pre><code>services:\n  - configure-network\n  - validate-network\n  - install-os\n  - configure-os\n  - run-os\n</code></pre> <p>If the <code>services</code> field is ommitted from the <code>OpenStackDataPlaneRole</code> spec, then the above list will be used.</p> <p>The default list of services are reconciled during role reconciliation if the service is in the role's service list.</p> <p> NOTE </p> <p>Do not create a custom service with the same name as one of the default services. The default service will overwrite the custom service with the same name during role reconciliation.</p>"},{"location":"composable_services/#interacting-with-the-openstackdataplaneservice-api","title":"Interacting with the <code>OpenStackDataPlaneService</code> API","text":"<p>The list of services available to be used by the dataplane can be seen by getting the list of <code>OpenStackDataPlaneService</code> resources.</p> <pre><code>oc get openstackdataplaneservice\n</code></pre> <p>If no custom services have been defined, the default avaiable services are returned.</p> <pre><code>NAME                AGE\nconfigure-network   20h\nconfigure-os        8d\ninstall-os          8d\nrepo-setup          8d\nrun-os              8d\nvalidate-network    8d\n</code></pre> <p>A service can be examined in more detail by looking at the YAML representation of the resource.</p> <pre><code>oc get openstackdataplaneservice configure-network -o yaml\n</code></pre> <p>In the <code>spec</code> output of the <code>configure-network</code> service, the ansible content that is used by the service is shown. While the content is very similar to the exact ansible syntax that will be used when the service executes ansible, it may not always be proper ansible syntax. The API for defining the ansible content of a service matches that of the 'OpenStackAnsibleEE' CRD from openstack-ansible-operator.</p> <p>The 'role' field on <code>OpenStackDataPlaneService</code> is the same API as the <code>role</code> field on `OpenStackAnsibleEE'.</p> <p>The 'play' field on <code>OpenStackDataPlaneService</code> is free form string content that will be passed directly as playbook content when ansible executes.</p> <p>Either <code>role</code> or <code>play</code> can define ansible content for a service, but both can not be used in the same service.</p>"},{"location":"composable_services/#composing-services","title":"Composing services","text":"<p>This example will walk through developing and using a custom service.</p>"},{"location":"composable_services/#developing-a-custom-service","title":"Developing a custom service","text":"<p>To create custom service, create a resource of kind <code>OpenStackDataPlaneService</code>. User either the 'play' or 'role' field in spec to specify custom ansible content. These fields are fully documented in the spec of the 'OpenStackAnsibleEE' CRD from openstack-ansible-operator.</p> <p>This example shows using the <code>play</code> field. Create a <code>hello-world.yaml</code> file with the following contents:</p> <pre><code>apiVersion: dataplane.openstack.org/v1beta1\nkind: OpenStackDataPlaneService\nmetadata:\n  name: hello-world\nspec:\n  label: dataplane-deployment-hello-world\n  openstackAnsibleEEImage: quay.io/openstack-k8s-operators/openstack-ansibleee-runner:latest\n  play: |\n    hosts: all\n    tasks:\n      - name: Hello World!\n        shell: \"echo Hello World!\"\n        register: output\n      - name: Show output\n        debug:\n          msg: \"{{ output.stdout }}\"\n</code></pre> <p>Note that the <code>play</code> field is a string, and not YAML. However, it should be proper ansible playbook syntax when parsed as YAML.</p> <p>Create the service:</p> <pre><code>oc apply -f hello-world.yaml\n</code></pre>"},{"location":"composable_services/#customizing-the-ansible-runner-image-used-by-a-service","title":"Customizing the ansible-runner image used by a service","text":"<p>The <code>openstackAnsibleEEImage</code> field is the container image used by the ansible-runner execution environment to execute ansible. The default image is built with the content from edpm-ansible.</p> <p>In some cases, it may be necessary to customize the image used by the ansible-runner execution environment in order to add additional ansible content that might be needed (such as ansible roles or modules).</p>"},{"location":"composable_services/#building-a-new-custom-ansible-runner-image","title":"Building a new custom ansible-runner image","text":"<p>Write a <code>Containerfile</code> that adds the needed custom content to the default image:</p> <pre><code>FROM quay.io/openstack-k8s-operators/openstack-ansibleee-runner:latest\n\nCOPY my_custom_role /usr/share/ansible/roles/my_custom_role\n</code></pre> <p>Build and push the image to a container registry:</p> <pre><code>podman build -t quay.io/example_user/my_custom_image:latest .\npodman push quay.io/example_user/my_custom_role:latest\n</code></pre> <p>In the <code>OpenStackDataPlaneService</code> YAML, specify the custom image for the <code>openstackAnsibleEEImage</code> field:</p> <pre><code>apiVersion: dataplane.openstack.org/v1beta1\nkind: OpenStackDataPlaneService\nmetadata:\n  name: hello-world\nspec:\n  label: dataplane-deployment-hello-world\n  openstackAnsibleEEImage: quay.io/example_user/my_custom_role:latest\n  ...\n</code></pre>"},{"location":"composable_services/#using-extramounts","title":"Using ExtraMounts","text":"<p>The <code>ExtraMounts</code> field in the <code>NodeSection</code> field can be used to mount custom content into the ansible-runner image. In some cases, this is a simpler method to customize the image than having to build an entirely new image.</p>"},{"location":"composable_services/#enabling-a-custom-service","title":"Enabling a custom service","text":"<p>To add a custom service to be executed as part of an <code>OpenStackDataPlaneRole</code> deployment, add the service name to the <code>services</code> field list on the role. Add the service name in the order that it should be executed relative to the other services. This example shows adding the <code>hello-world</code> service as the first service to execute for the <code>edpm-compute</code> role.</p> <pre><code>apiVersion: dataplane.openstack.org/v1beta1\nkind: OpenStackDataPlane\nmetadata:\n  name: openstack-edpm\nspec:\n  roles:\n    edpm-compute:\n      services:\n        - hello-world\n        - configure-network\n        - validate-network\n        - install-os\n        - configure-os\n        - run-os\n</code></pre> <p>When customizing the services list, the default list of services must be reproduced and then customized if the intent is to still deploy those services. If just the <code>hello-world</code> service was listed in the list, then that is the only service that would be deployed.</p>"},{"location":"contributing/","title":"Contributing","text":""},{"location":"contributing/#getting-started","title":"Getting Started","text":"<p>You\u2019ll need a Kubernetes cluster to run against. You can use KIND to get a local cluster for testing, or run against a remote cluster.  Note: Your controller will automatically use the current context in your kubeconfig file (i.e. whatever cluster <code>kubectl cluster-info</code> shows).</p>"},{"location":"contributing/#running-on-the-cluster","title":"Running on the cluster","text":"<ol> <li>Install Instances of Custom Resources:</li> </ol> <pre><code>kubectl apply -f config/samples/\n</code></pre> <ol> <li>Build and push your image to the location specified by <code>IMG</code>:</li> </ol> <pre><code>make docker-build docker-push IMG=&lt;some-registry&gt;/dataplane-operator:tag\n</code></pre> <ol> <li>Deploy the controller to the cluster with the image specified by <code>IMG</code>:</li> </ol> <pre><code>make deploy IMG=&lt;some-registry&gt;/dataplane-operator:tag\n</code></pre>"},{"location":"contributing/#uninstall-crds","title":"Uninstall CRDs","text":"<p>To delete the CRDs from the cluster:</p> <pre><code>make uninstall\n</code></pre>"},{"location":"contributing/#undeploy-controller","title":"Undeploy controller","text":"<p>UnDeploy the controller to the cluster:</p> <pre><code>make undeploy\n</code></pre>"},{"location":"contributing/#how-it-works","title":"How it works","text":"<p>This project aims to follow the Kubernetes Operator pattern</p> <p>It uses Controllers which provide a reconcile function responsible for synchronizing resources until the desired state is reached on the cluster</p>"},{"location":"contributing/#test-it-out","title":"Test It Out","text":"<ol> <li>Install the CRDs into the cluster:</li> </ol> <pre><code>make install\n</code></pre> <ol> <li>Run your controller (this will run in the foreground, so switch to a new terminal if you want to leave it running):</li> </ol> <pre><code>make run\n</code></pre> <p>NOTE: You can also run this in one step by running: <code>make install run</code></p>"},{"location":"contributing/#modifying-the-api-definitions","title":"Modifying the API definitions","text":"<p>If you are editing the API definitions, generate the manifests such as CRs or CRDs using:</p> <pre><code>make manifests\n</code></pre> <p>NOTE: Run <code>make --help</code> for more information on all potential <code>make</code> targets</p> <p>More information can be found via the Kubebuilder Documentation</p>"},{"location":"contributing/#testing","title":"Testing","text":"<p>The tests can be run with the following command: <pre><code>make test\n</code></pre></p> <p>The <code>test</code> target runs the EnvTest tests with Ginkgo. These tools will be installed by the <code>test</code> if needed.</p> <p><code>EnvTest</code> tests are under the <code>tests/functional</code> directory in dataplane-operator.</p>"},{"location":"contributing/#running-kuttl-tests","title":"Running kuttl tests","text":"<p>The kuttl tests require a running cluster with openstack-ansibleee-operator running in the cluster.</p> <p>kuttl tests are under the 'tests/kuttl/tests' in dataplane-operator.</p>"},{"location":"contributing/#from-install_yamls","title":"From install_yamls","text":"<p>The kuttl tests are run from the install_yamls repository by the CI jobs.</p> <p>Running from <code>install_yamls</code>:</p> <pre><code>cd install_yamls\n# Set environment variables if needed to use a specific repo and branch of dataplane-operator\nexport DATAPLANE_REPO=https://github.com/openstack-k8s-operators/dataplane-operator.git\nexport DATAPLANE_BRANCH=main\nmake dataplane_kuttl\n</code></pre>"},{"location":"contributing/#from-dataplane-operator","title":"From dataplane-operator","text":"<p>The kuttl tests can also be run directly from the dataplane-operator checkout. When running from a dataplane-operator checkout, <code>kubectl-kuttl</code> must be installed. The <code>kubectl-kuttl</code> command can be installed from kuttl releases, or using the Makefile target <code>kuttl</code>:</p> <pre><code>make kuttl\n</code></pre> <p>Then, run the operator from a checkout:</p> <pre><code>make run\n</code></pre> <p>Execute the kuttl tests:</p> <pre><code>make kuttl-test\n</code></pre> <p>Run a single test if desired:</p> <pre><code>make kuttl-test KUTTL_ARGS=\"--test dataplane-deploy-no-nodes\"\n</code></pre> <p>Skip the test resource delete, which will leave the test resources created in the cluster, and can be useful for debugging failed tests:</p> <pre><code>make kuttl-test KUTTL_ARGS=\"--test dataplane-deploy-no-nodes --skip-delete\"\n</code></pre>"},{"location":"contributing/#contributing-to-documentation","title":"Contributing to documentation","text":""},{"location":"contributing/#rendering-documentation-locally","title":"Rendering documentation locally","text":"<p>Install docs build requirements into virtualenv:</p> <pre><code>python3 -m venv local/docs-venv\nsource local/docs-venv/bin/activate\npip install -r docs/doc_requirements.txt\n</code></pre> <p>Serve docs site on localhost:</p> <pre><code>mkdocs serve\n</code></pre> <p>Click the link it outputs. As you save changes to files modified in your editor, the browser will automatically show the new content.</p>"},{"location":"contributing/#create-or-edit-diagrams","title":"Create or edit diagrams","text":"<p>Create a <code>puml</code> file inside <code>docs/diagrams/src</code></p> <pre><code>touch docs/diagrams/src/demo.puml\n</code></pre> <p>Check the PlantUML syntax here: https://plantuml.com/deployment-diagram</p> <p>Serve docs site on localhost:</p> <pre><code>mkdocs serve\n</code></pre> <p>Add the yielded <code>svg</code> into the desired <code>.md</code> file <pre><code>![Diagram demo](diagrams/out/demo.svg \"Diagram demo\")\n</code></pre></p>"},{"location":"deploying/","title":"Deploying a DataPlane","text":"<p>Deploying a dataplane consists of creating the custom resources (whether OpenStackDataPlane, OpenStackDataPlaneRole, or OpenStackDataPlaneNode) that define the layout of the dataplane.</p> <p>This documentation will cover using each resource individually, as well as using the OpenStackDataPlane resource to deploy everything in a single resource.</p>"},{"location":"deploying/#samples","title":"Samples","text":"<p>The config/samples directory contains many sample custom resources that illustrate different dataplane deployments. These can be used as a starting point and customized for a given deployment, or a resource can be entirely written from no sample.</p>"},{"location":"deploying/#prerequisites","title":"Prerequisites","text":""},{"location":"deploying/#controlplane","title":"ControlPlane","text":"<p>A functional dataplane requires a functional controlplane deployed by openstack-operator. This documentation will make use of resources within the controlplane to correctly customize the dataplane configuration. The docs here do not cover deploying a controlplane and assume that has already been completed separately.</p>"},{"location":"deploying/#configured-namespace-openstack","title":"Configured namespace (openstack)","text":"<p>The <code>oc</code> commands shown in the documentation assume that the <code>oc</code> client has been configured to use the correct namespace for an OpenStack deployment. By default, the namespace is <code>openstack</code>.</p>"},{"location":"deploying/#review-the-available-fields-on-the-dataplane-crds","title":"Review the available fields on the dataplane CRD's","text":"<p>Further documentation on each field available in the dataplane CRD's is available under the Custom Resources documentation section. This deployment section does not go into full detail about each available field.</p>"},{"location":"deploying/#deploying-a-dataplane-using-pre-provisioned-nodes","title":"Deploying a dataplane using pre-provisioned nodes","text":"<p>This section documents using pre-provisioned nodes in the dataplane. Pre-provisioned nodes already have their OS (operating system) installed and are powered on and booted into the installed OS.</p>"},{"location":"deploying/#create-ssh-key-secret","title":"Create SSH key secret","text":"<p>Pre-provisioned nodes must be pre-configured with an SSH public key in the <code>$HOME/.ssh/authorized_keys</code> file for a user that has password-less sudo privileges. Ansible will make use of this user and SSH key when it executes.</p> <p>The private key for the SSH keypair is created as a Secret in the cluster. Set the environment variables shown with the name of the secret and the path to the SSH private key. Run the shown command to create the Secret in the cluster.</p> <pre><code># Name of the secret that will be created in the cluster\nSECRET_NAME=\"dataplane-ansible-ssh-private-key-secret\"\n# Path of the SSH private key file. Public key file should also exist at\n# the same path, but with a \".pub\" extension.\nSSH_KEY_FILE=\"ansibleee-ssh-key-id_rsa\"\n\noc create secret generic ${SECRET_NAME} \\\n--save-config \\\n--dry-run=client \\\n--from-file=authorized_keys=${SSH_KEY_FILE}.pub \\\n--from-file=ssh-privatekey=${SSH_KEY_FILE} \\\n--from-file=ssh-publickey=${SSH_KEY_FILE}.pub \\\n-o yaml | \\\noc apply -f -\n</code></pre> <p>Verify the secret was created:</p> <pre><code>oc describe secret dataplane-ansible-ssh-private-key-secret\n</code></pre>"},{"location":"deploying/#create-openstackdataplane","title":"Create OpenStackDataPlane","text":"<p>This document will cover writing the <code>YAML</code> document for an <code>OpenStackDataPlane</code> resource. Once the document is ready, it will be created with <code>oc</code> as the last step.</p> <p>Start the <code>YAML</code> document in an <code>openstack-edpm.yaml</code> file and give the dataplane a name.</p> <pre><code>apiVersion: dataplane.openstack.org/v1beta1\nkind: OpenStackDataPlane\nmetadata:\n  name: openstack-edpm\n</code></pre> <p>Begin writing the dataplane spec. Initially, a <code>deployStrategy</code> field will be added to the spec that contains <code>deploy: false</code>. This allows for creating the dataplane resources without triggering an Ansible execution immediately.</p> <pre><code>apiVersion: dataplane.openstack.org/v1beta1\nkind: OpenStackDataPlane\nmetadata:\n  name: openstack-edpm\nspec:\n  deployStrategy:\n      deploy: false\n</code></pre> <p>Add roles to the dataplane. This example uses a single role, but any number could be added. A single role called <code>dataplane-role</code> is added for this example. Under the role, a <code>preProvisioned</code> field is set to <code>True</code> since these nodes are preprovisioned. A <code>nodeTemplate</code> field is also started that contains the fields that will have their values inherited by each node in the role. See Inheritance for more details about how role and node inheritance works. Within <code>nodeTemplate</code>, the fields shown are documented inline in the example.</p> <pre><code>apiVersion: dataplane.openstack.org/v1beta1\nkind: OpenStackDataPlane\nmetadata:\n  name: openstack-edpm\nspec:\n  deployStrategy:\n    deploy: false\n  roles:\n    edpm-compute:\n      preProvisioned: true\n      nodeTemplate:\n\n        # User that has the SSH key for access\n        ansibleUser: rhel-user\n        # Secret name containing SSH key. Use the same secret name as\n        # ${SECRET_NAME} that was used to create the secret.\n        ansibleSSHPrivateKeySecret: dataplane-ansible-ssh-private-key-secret\n\n        # Defining the novaTemplate here means the nodes in this role are\n        # computes\n        nova: {}\n\n        # Ansible variables that configure how the roles from edpm-ansible\n        # customize the deployment.\n        ansibleVars:\n\n          # edpm_network_config\n          # Default nic config template for a EDPM compute node\n          # These vars are edpm_network_config role vars\n          edpm_network_config_template: templates/single_nic_vlans/single_nic_vlans.j2\n\n          # See config/samples/dataplane_v1beta1_openstackdataplane.yaml\n          # for the other most common ansible varialbes that need to be set.\n</code></pre> <p>The list of ansible variables that can be set under <code>ansibleVars</code> is extensive. To understand what variables are available for each service, see the documentation in the Create OpenStackDataPlaneServices section.</p> <p>Common configurations that can be enabled with <code>ansibleVars</code> are also documented at Common Configurations.</p> <p>Some of the ansible variables will need to be set based on values from the controlplane that is already deployed. This set of ansible variables and the <code>oc</code> command that can be used to get their values are shown below.</p> <pre><code>export EDPM_OVN_METADATA_AGENT_TRANSPORT_URL=$(oc get secret rabbitmq-transport-url-neutron-neutron-transport -o json | jq -r .data.transport_url | base64 -d)\nexport EDPM_OVN_METADATA_AGENT_SB_CONNECTION=$(oc get ovndbcluster ovndbcluster-sb -o json | jq -r .status.dbAddress)\nexport EDPM_OVN_METADATA_AGENT_NOVA_METADATA_HOST=$(oc get svc nova-metadata-internal -o json |jq -r '.status.loadBalancer.ingress[0].ip')\nexport EDPM_OVN_METADATA_AGENT_PROXY_SHARED_SECRET=$(oc get secret osp-secret -o json | jq -r .data.MetadataSecret  | base64 -d)\nexport EDPM_OVN_METADATA_AGENT_BIND_HOST=127.0.0.1\nexport EDPM_OVN_DBS=$(oc get ovndbcluster ovndbcluster-sb -o json | jq -r '.status.networkAttachments.\"openstack/internalapi\"[0]')\n\necho \"\nedpm_ovn_metadata_agent_DEFAULT_transport_url: ${EDPM_OVN_METADATA_AGENT_TRANSPORT_URL}\nedpm_ovn_metadata_agent_metadata_agent_ovn_ovn_sb_connection: ${EDPM_OVN_METADATA_AGENT_SB_CONNECTION}\nedpm_ovn_metadata_agent_metadata_agent_DEFAULT_nova_metadata_host: ${EDPM_OVN_METADATA_AGENT_NOVA_METADATA_HOST}\nedpm_ovn_metadata_agent_metadata_agent_DEFAULT_metadata_proxy_shared_secret: ${EDPM_OVN_METADATA_AGENT_PROXY_SHARED_SECRET}\nedpm_ovn_metadata_agent_DEFAULT_bind_host: ${EDPM_OVN_METADATA_AGENT_BIND_HOST}\nedpm_ovn_dbs:\n- ${EDPM_OVN_DBS}\n\"\n</code></pre> <p>Add the output to the <code>ansibleVars</code> field to configure the values on the role.</p> <p>Add nodes to the dataplane. Each node should have its <code>role</code> field set to the name of its role. Since we are using a single role in this example, that role name will be <code>edpm-compute</code>. Each node will also inherit values from the <code>nodeTemplate</code> field on its role into the <code>node</code> field on the node. However, certain fields will need to be overridden given that they are specific to a node. In this example, <code>ansibleVars</code> has the node specific variables.</p> <p> NOTE </p> <p>In the case of <code>ansibleVars</code>, the value is merged with that of the value from the role. This makes it so that the entire value of <code>ansibleVars</code> from the role does not need to be reproduced for each node just to set a few node specific values.</p> <p>With the nodes and the controlplane specific variables added, the full <code>openstack-datplane</code> <code>YAML</code> document looks like the following:</p> <pre><code>apiVersion: dataplane.openstack.org/v1beta1\nkind: OpenStackDataPlane\nmetadata:\n  name: openstack-edpm\nspec:\n  deployStrategy:\n    deploy: false\n  roles:\n    edpm-compute:\n      preProvisioned: true\n      nodeTemplate:\n\n        # User that has the SSH key for access\n        ansibleUser: rhel-user\n        # Secret name containing SSH key. Use the same secret name as\n        # ${SECRET_NAME} that was used to create the secret.\n        ansibleSSHPrivateKeySecret: dataplane-ansible-ssh-private-key-secret\n\n        # Defining the novaTemplate here means the nodes in this role are\n        # computes\n        nova: {}\n\n        # Ansible variables that configure how the roles from edpm-ansible\n        # customize the deployment.\n        ansibleVars:\n\n          # edpm_network_config\n          # Default nic config template for a EDPM compute node\n          # These vars are edpm_network_config role vars\n          edpm_network_config_template: templates/single_nic_vlans/single_nic_vlans.j2\n\n          # Variables set with values from the controlplane\n          edpm_ovn_metadata_agent_default_transport_url: rabbit://default_user@rabbitmq.openstack.svc:5672\n          edpm_ovn_metadata_agent_metadata_agent_ovn_ovn_sb_connection: tcp:10.217.5.121:6642\n          edpm_ovn_metadata_agent_metadata_agent_default_nova_metadata_host: 127.0.0.1\n          edpm_ovn_metadata_agent_metadata_agent_default_metadata_proxy_shared_secret: 12345678\n          edpm_ovn_metadata_agent_default_bind_host: 127.0.0.1\n          edpm_ovn_dbs:\n          - 192.168.24.1\n\n          # See config/samples/dataplane_v1beta1_openstackdataplane.yaml\n          # for the other most common ansible varialbes that need to be set.\n\n  nodes:\n    edpm-compute-0:\n      role: edpm-compute\n      hostName: edpm-compute-0\n      ansibleHost: 192.168.122.100\n      node:\n        ansibleVars: |\n          ctlplane_ip: 192.168.122.100\n          internal_api_ip: 172.17.0.100\n          storage_ip: 172.18.0.100\n          tenant_ip: 172.19.0.100\n          fqdn_internal_api: edpm-compute-0.example.com\n    edpm-compute-1:\n      role: edpm-compute\n      hostName: edpm-compute-1\n      ansibleHost: 192.168.122.101\n      node:\n        ansibleVars: |\n          ctlplane_ip: 192.168.122.101\n          internal_api_ip: 172.17.0.101\n          storage_ip: 172.18.0.101\n          tenant_ip: 172.19.0.101\n          fqdn_internal_api: edpm-compute-1.example.com\n</code></pre> <p>Create the dataplane using the <code>oc</code> command.</p> <pre><code>oc create -f openstack-edpm.yaml\n</code></pre> <p>Verify that the dataplane, role, and nodes were created.</p> <pre><code>oc get openstackdataplane\noc get openstackdataplanerole\noc get openstackdataplanenode\n</code></pre> <p>The output should be similar to:</p> <pre><code>$ oc get openstackdataplane\nNAME             STATUS   MESSAGE\nopenstack-edpm   False    Deployment not started\n$ oc get openstackdataplanerole\nNAME           STATUS   MESSAGE\nedpm-compute   False    Deployment not started\n$ oc get openstackdataplanenode\nNAME             STATUS   MESSAGE\nedpm-compute-0   False    Deployment not started\nedpm-compute-1   False    Deployment not started\n</code></pre>"},{"location":"deploying/#understanding-openstackdataplaneservices","title":"Understanding OpenStackDataPlaneServices","text":"<p>A dataplane is configured with a set of services that define the Ansible roles and task files that are executed to complete the deployment. The dataplane-operator has a default list of services that are deployed by default (unless the <code>services</code> field is overridden). The default services are provided within the config/services directory.</p> <p>Each service is a custom resource of type OpenStackDataPlaneService. The services will be created and updated automatically during OpenStackDataPlaneRole reconciliation.</p> <p>See Composable Services for further documentation about services and customizing services.</p> <p>Verify the services were created.</p> <pre><code>oc get openstackdataplaneservice\n</code></pre> <p>The output should be similar to:</p> <pre><code>NAME                AGE\nconfigure-network   6d7h\nconfigure-os        6d6h\ninstall-os          6d6h\nrun-os              6d6h\nvalidate-network    6d6h\n</code></pre> <p>Each service uses the <code>role</code> field from the <code>OpenStackAnsibleEE</code> CRD provided by openstack-ansibleee-operator to define the Ansible roles and task files that are executed as part of that service.</p> <p>For example, the list of roles for the <code>install-os</code> service can be seen by describing the resource.</p> <pre><code>oc describe openstackdataplaneservice install-os\n</code></pre> <p>Any role listed in the <code>osp.edpm</code> namespace is provided by the edpm-ansible project. Within that project, the ansible variables that can be used to configure the role are documented.</p> <p>For example, in the describe output for the <code>install-os</code> service, the <code>osp.edpm.edpm_sshd</code> role is seen.</p> <pre><code>import_role:\n  Name:        osp.edpm.edpm_sshd\n  tasks_from:  install.yml\nName:          Install edpm_sshd\nTags:\n  edpm_sshd\n</code></pre> <p>The ansible variables that configure the behavior of the <code>osp.edpm.edpm_sshd</code> role are available at https://github.com/openstack-k8s-operators/edpm-ansible/blob/main/roles/edpm_sshd/tasks/main.yml.</p> <p> NOTE </p> <p>If the default provided services are edited, those edits will be lost after any further role reconciliations.</p>"},{"location":"deploying/#deploy-the-dataplane","title":"Deploy the dataplane.","text":"<p>With the dataplane resources created, it can be seen from their status message that they have not yet been deployed. This means no ansible has been executed to configure any of the services on the nodes. They still need to be deployed.</p> <p>To deploy the <code>openstack-edpm</code> dataplane resource, the <code>spec.deployStrategy.deploy</code> field needs to be set to <code>True</code>. This will trigger the deployment of all the configured services across the nodes. The field can be set with the following command to start the deployment:</p> <pre><code>oc patch openstackdataplane openstack-edpm  -p='[{\"op\": \"replace\", \"path\": \"/spec/deployStrategy/deploy\", \"value\":true}]' --type json\n</code></pre> <p>The <code>oc patch</code> command sets the <code>deploy</code> field to <code>True</code>, which starts the deployment. <code>oc edit openstackdataplane openstack-edpm</code> could alternatively be used to edit the resource directly in an editor to set the field to <code>True</code>.</p> <p>With the deployment started, ansible will be executed to configure the nodes. When the deployment is complete, the status messages will change to indicate the deployment is ready.</p> <pre><code>$ oc get openstackdataplane\nNAME             STATUS   MESSAGE\nopenstack-edpm   True    DataPlane Ready\n$ oc get openstackdataplanerole\nNAME           STATUS   MESSAGE\nedpm-compute   True    DataPlaneRole Ready\n$ oc get openstackdataplanenode\nNAME             STATUS   MESSAGE\nedpm-compute-0   True    DataPlaneNode Ready\nedpm-compute-1   True    DataPlaneNode Ready\n</code></pre>"},{"location":"deploying/#understanding-dataplane-conditions","title":"Understanding dataplane conditions","text":"<p>Each dataplane resource has a series of conditions within their <code>status</code> subresource that indicate the overall state of the resource, including its deployment progress.</p> <p><code>OpenStackDataPlane</code> resource conditions:</p> <p>$ oc get openstackdataplane openstack-edpm -o json | jq .status.conditions[].type   \"Ready\"   \"DeploymentReady\"   \"SetupReady\"</p> <p><code>OpenStackDataPlaneRole</code> resource conditions:</p> <p>$ oc get openstackdataplanerole edpm-compute -o json | jq .status.conditions[].type   \"Ready\"   \"DeploymentReady\"   \"RoleBaremetalProvisionReady\"   \"SetupReady\"   \"configure-network service ready\"   \"configure-os service ready\"   \"install-os service ready\"   \"run-os service ready\"   \"validate-network service ready\"</p> <p><code>OpenStackDataPlaneNode</code> resource conditions:</p> <p>$ oc get openstackdataplanenode edpm-compute-0 -o json | jq .status.conditions[].type   \"Ready\"   \"DeploymentReady\"   \"SetupReady\"   \"configure-network service ready\"   \"configure-os service ready\"   \"install-os service ready\"   \"run-os service ready\"   \"validate-network service ready\"</p> <p>Each resource has a <code>Ready</code>, <code>DeploymentReady</code>, and <code>SetupReady</code> conditions. The role and node also have a condition for each service that is being deployed.</p>"},{"location":"deploying/#condition-progress","title":"Condition Progress","text":"<p>The <code>Ready</code> condition reflects the latest condition state that has changed. Until a deployment has been started and finished successfully, the <code>Ready</code> condition will be <code>False</code>. When the deployment succeeds, it will be set to <code>True</code>. A subsequent deployment that is started will set the condition back to <code>False</code> until the deployment succeeds when it will be set back to <code>True</code>.</p> <p><code>SetupReady</code> will be set to <code>True</code> once all setup related tasks for a resource are complete. Setup related tasks include verifying the SSH key secret and verifying other fields on the resource, as well as creating the Ansible inventory for each resource.</p> <p>Each service specific condition will be set to <code>True</code> as that service completes successfully. Looking at the service conditions will indicate which services have completed their deployment, or in failure cases, which services failed.</p>"},{"location":"design/","title":"DataPlane Design","text":"<p>The dataplane-operator prepares nodes with enough operating system and other configuration to make them suitable for hosting OpenStack workloads.</p> <p>It uses the openstack-baremetal-operator to optionally provision baremetal. Ansible is used to deploy and configure software on the nodes.</p>"},{"location":"design/#dataplane-design-and-resources","title":"DataPlane Design and Resources","text":"<p>The dataplane-operator exposes the concepts of dataplanes, roles, nodes, and services as CRD's:</p> <ul> <li>OpenStackDataPlane</li> <li>OpenStackDataPlaneRole</li> <li>OpenStackDataPlaneNode</li> <li>OpenStackDataPlaneService</li> </ul> <p>Each node in a dataplane is represented by a corresponding OpenStackDataPlaneNode resource. A node must already be baremetal provisioned when it's OpenStackDataPlaneNode resource is used to manage the node. The node can either be pre-provisioned outside the environment by external tooling, or it may be provisioned by it's associated role.</p> <p>Each role in a dataplane is represented by a corresponding OpenStackDataPlaneRole resource.  The OpenStackDataPlaneRole CRD provides for a logical grouping of nodes of a similar type within a role. Similarities within a role are defined by the user, and could be of a small scope (ansible port), or a large scope (same network config, nova config, provisioning config, etc). The properties that all nodes in a role share is set in the NodeTemplate field of the role's Spec.</p> <p>OpenStackDataPlaneRole implements a baremetal provisioning interface to provision the nodes in the role. This interface can be used to provision the initial OS on a set of nodes.</p> <p>A role also provides for an inheritance model of node attributes. Properties from the <code>NodeTemplate</code> on the role will automatically be inherited by the nodes on that role. Nodes can also set their own properties within their <code>Node</code> field, which will override the inherited values from the role. See inheritance for more in depth details about how inheritance works between roles and nodes.</p> <p>The OpenStackDataPlane CRD provides a way to group all roles and nodes together into a single resource that represents the entire dataplane. While roles and nodes can be managed individually, OpenStackDataPlane provides an API and convenience to manage them all together and at the same time. When using OpenStackDataPlane, it is the Owner of its associated roles and nodes. When using OpenStackDataPlane, do not manage roles and nodes outside of the OpenStackDataPlane resource. Roles and nodes that are owned by the dataplane will eventually be reconciled back to the state as stored by the OpenStackDataPlane resource, potentially undoing changes done outside of the OpenStackDataPlane resource.</p> <p>OpenStackDataPlaneService is a CRD for representing an Ansible based service to orchestrate across the nodes. A composable service interface is provided that allows for customizing which services are run on which roles and nodes, and for defining custom services.</p>"},{"location":"design/#deployment","title":"Deployment","text":"<p>The deployment handling in <code>dataplane-operator</code> is implemented within the deployment package at <code>pkg/deployment</code>. This allows for both a node and role to be deployed in the same way. A node uses an ansible inventory containing just that single node when it triggers a deployment. A role uses an ansible inventory containing all the nodes in that role when it triggers a deployment. This allows for deploying just a single node at a time, or an entire role for bulk deployment.</p>"},{"location":"inheritance/","title":"Inheritance","text":"<p>An <code>OpenStackDataPlaneNode</code> inherits any attribute of an <code>OpenStackDataPlaneRole</code> but those attributes may also be overridden on the node level.</p> <p>Suppose the following CR is created with <code>oc create -f openstackdataplanerole-sample.yaml</code>:</p> <p><pre><code>---\napiVersion: dataplane.openstack.org/v1beta1\nkind: OpenStackDataPlaneRole\nmetadata:\nname: openstackdataplanerole-sample\nspec:\ndataPlaneNodes:\n- name: openstackdataplanenode-sample-1\nansibleHost: 192.168.122.18\nhostName: openstackdataplanenode-sample-1.localdomain\nnode:\nnetworks:\n- fixedIP: 192.168.122.18\nnetwork: ctlplane\n- name: openstackdataplanenode-sample-2\nansibleHost: 192.168.122.19\nhostName: openstackdataplanenode-sample-2.localdomain\nnode:\nnetworks:\n- fixedIP: 192.168.122.19\nnetwork: ctlplane\nnodeTemplate:\nansiblePort: 22\nansibleUser: root\nmanaged: false\nmanagementNetwork: ctlplane\nnetworkConfig:\ntemplate: templates/net_config_bridge.j2\n</code></pre> Then two CRs like the following, representing two nodes, will be created automatically by the dataplane-operator and there is no need to <code>oc create</code> separate files containing the following.</p> <p>Node 1 <pre><code>---\napiVersion: dataplane.openstack.org/v1beta1\nkind: OpenStackDataPlaneNode\nmetadata:\nname: openstackdataplanenode-sample-1\nspec:\nansibleHost: 192.168.122.18\nhostName: openstackdataplanenode-sample-1.localdomain\nnode:\nnetworks:\n- fixedIP: 192.168.122.18\nnetwork: ctlplane\nrole: openstackdataplanerole-sample\n</code></pre> Node 2 <pre><code>---\napiVersion: dataplane.openstack.org/v1beta1\nkind: OpenStackDataPlaneNode\nmetadata:\nname: openstackdataplanenode-sample-2\nspec:\nansibleHost: 192.168.122.19\nhostName: openstackdataplanenode-sample-2.localdomain\nnode:\nnetworks:\n- fixedIP: 192.168.122.19\nnetwork: ctlplane\nrole: openstackdataplanerole-sample\n</code></pre> Because of inheritance, redundant information did not need to be provided to both nodes. Only the information which differed per node, e.g. <code>ansibleHost</code>, had to be specified. Furthermore, the redundant information is not seen in the two nodes' CRs. I.e. we do not see the following from the <code>nodeTemplate</code> in node 1 and 2 above. <pre><code>    ansiblePort: 22\nansibleUser: root\nmanaged: false\nmanagementNetwork: ctlplane\nnetworkConfig:\ntemplate: templates/net_config_bridge.j2\n</code></pre> However, it's unambiguous that each node has <code>ansiblePort</code> 22 because they have <code>role: openstackdataplanerole-sample</code>. If the node is inspected however, port 22 will be set.</p> <p>The node controller resolves this dynamically by looking at <code>role.nodeSpec</code> and we can assume that the value was inherited. If we need to override a setting for any single node so that it doesn't use it's <code>nodeTemplate</code>, then we may do so by directly updating only that node (e.g. with <code>oc edit</code>). In that case we'd see an <code>ansiblePort</code> set directly in that node's CR. This allows the user to change the <code>nodeTemplate</code> after creation and once reconciliation is completed all existing nodes will inherit the new value.</p> <p>Almost any top level property in a node overrides the whole property in a role. E.g. if the role <code>nodeTemplate</code> had a list like the following: <pre><code>    foo:\n      - bar: baz\n</code></pre> and a node had a list like the following: <pre><code>    foo:\n      - qux: quux\n</code></pre> Then the node will only have <code>{\"qux\": \"quux\"}</code> in its list. I.e. there would not be any merging and the node would not also have <code>{\"bar\": \"baz\"}</code> in its list. The one exception to this rule is the <code>AnsibleVars</code> property. If the following CRs are created:</p> <pre><code>kind: OpenStackDataPlaneRole\nmetadata:\nname: edpm-compute\nspec:\nnodeTemplate:\nansibleVars: |\nneutron_public_interface_name: eth0\nedpm_chrony_ntp_servers:\n- clock.redhat.com\n- clock2.redhat.com\n...\n</code></pre> <p><pre><code>kind: OpenStackDataPlaneNode\nmetadata:\nname: edpm-compute-0\nspec:\nrole: edpm-compute\nnode:\nansibleVars: |\ntenant_ip: 192.168.24.100\n...\n</code></pre> The <code>ConfigMap</code> containing the inventory would have the following vars:</p> <p><pre><code>      neutron_public_interface_name: eth0\ntenant_ip: 192.168.24.100\nedpm_chrony_ntp_servers:\n- clock.redhat.com\n- clock2.redhat.com\n</code></pre> Only top level keys are compared for merging. E.g. if <code>edpm-compute-0</code> had a <code>edpm_chrony_ntp_servers</code> list with <code>clock3.redhat.com</code>, then the resultant inventory for the node would not have three NTP servers; it would only have <code>clock3.redhat.com</code>. I.e. there is no \"deep merging\".</p> <p>It's also possible to create a node directly outside of a role CR and define its role. If the following CR is created: <pre><code>---\napiVersion: dataplane.openstack.org/v1beta1\nkind: OpenStackDataPlaneNode\nmetadata:\nname: openstackdataplanenode-sample-3-from\nspec:\nrole: openstackdataplanerole-sample\nhostName: openstackdataplanenode-sample-3.localdomain\nansibleHost: 192.168.122.20\nnode:\nnetworks:\n- network: ctlplane\nfixedIP: 192.168.122.20\n</code></pre> After the above CR is created, the node openstackdataplanenode-sample-3-from may then be inspected further using a command like <code>oc get OpenStackDataPlaneNode openstackdataplanenode-sample-3-from -o yaml</code> which should show that it inherited values from the role <code>nodeTemplate</code>. In cases like these, the <code>dataPlaneNodes</code> list will not reflect all of the nodes within the role.</p>"},{"location":"interacting_with_ansible/","title":"Interacting with Ansible","text":"<p>When a dataplane service is executed during a role deployment, a corresponding OpenStackAnsibleEE resource is created. The OpenStackAnsibleEE resource is the associated ansible execution with the service.</p> <p>OpenStackAnsibleEE resources are reconciled by openstack-ansibleee-operator. During reconciliation a Job resource is created which in turn creates a Pod resource. The pod is started with an Ansible Execution Environment image, and runs ansible-runner.</p>"},{"location":"interacting_with_ansible/#retrieving-and-inspecting-openstackansibleee-resources","title":"Retrieving and inspecting OpenStackAnsibleEE resources","text":"<p>During (or after) a deployment the instances of OpenStackAnsibleEE can be retrieved from the API.</p> <pre><code>oc get openstackansibleee\n</code></pre> <p>Sample output when the default list of services:</p> <pre><code>NAME                                                  NETWORKATTACHMENTS   STATUS   MESSAGE\ndataplane-deployment-configure-network-edpm-compute                        True     AnsibleExecutionJob complete\ndataplane-deployment-configure-os-edpm-compute                             True     AnsibleExecutionJob complete\ndataplane-deployment-install-os-edpm-compute                               True     AnsibleExecutionJob complete\ndataplane-deployment-run-os-edpm-compute                                   True     AnsibleExecutionJob complete\ndataplane-deployment-validate-network-edpm-compute                         True     AnsibleExecutionJob complete\n</code></pre> <p>Querying for pods with the OpenStackAnsibleEE label</p> <pre><code>oc get pods -l app=openstackansibleee\n</code></pre> <p>Sample output:</p> <pre><code>dataplane-deployment-configure-network-edpm-compute-j6r4l   0/1     Completed           0          3m36s\ndataplane-deployment-validate-network-edpm-compute-6g7n9    0/1     Pending             0          0s\ndataplane-deployment-validate-network-edpm-compute-6g7n9    0/1     ContainerCreating   0          11s\ndataplane-deployment-validate-network-edpm-compute-6g7n9    1/1     Running             0          13s\n</code></pre> <p>Querying for jobs, shows the corresponding job for each OpenStackAnsibleEE resource:</p> <pre><code>oc get jobs -l app=openstackansibleee\n</code></pre> <p>Sample output:</p> <pre><code>NAME                                                  COMPLETIONS   DURATION   AGE\ndataplane-deployment-configure-network-edpm-compute   1/1           8s         2m51s\ndataplane-deployment-configure-os-edpm-compute        1/1           8s         2m27s\ndataplane-deployment-install-os-edpm-compute          1/1           8s         2m35s\ndataplane-deployment-run-os-edpm-compute              1/1           8s         2m19s\ndataplane-deployment-validate-network-edpm-compute    1/1           8s         2m43s\n</code></pre> <p>Using the job name, the corresponding pod can be retrieved:</p> <pre><code>oc get pods | grep dataplane-deployment-configure-network-edpm-compute\n</code></pre> <p>Sample output:</p> <pre><code>dataplane-deployment-configure-network-edpm-compute-2hshp   0/1     Completed            0                5m45s\n</code></pre> <p>Using the job name, the ansible logs can be retrieved:</p> <pre><code>oc logs job.batch/dataplane-deployment-configure-network-edpm-compute\n</code></pre>"},{"location":"interacting_with_ansible/#controlling-the-ansible-execution","title":"Controlling the Ansible execution","text":"<p>The deployStrategy field on OpenStackDataPlane, OpenStackDataPlaneRole, and OpenStackDataPlaneNode has support for specifying the ansible tags, skip-tags, and limit</p> <p>The fields in deployStrategy that correspond to these options are:</p> <pre><code>ansibleTags\nansibleSkipTags\nansibleLimit\n</code></pre> <p>The syntax for these fields match the syntax that ansible accepts on the command line for <code>ansible-playbook</code> and <code>ansible-runner</code> for each of these fields.</p> <p>Example usage of these fields:</p> <pre><code>apiVersion: dataplane.openstack.org/v1beta1\nkind: OpenStackDataPlane\nmetadata:\n  name: openstack-edpm\nspec:\n  deployStrategy:\n      deploy: false\n      ansibleTags: containers\n      ansibleSkipTags: packages\n      ansibleLimit: compute1*,compute2*\n</code></pre> <p>The above example translates to an ansible command with the following arguments:</p> <pre><code>--tags containers --skip-tags packages --limit compute1*,compute2*\n</code></pre>"},{"location":"openstack_dataplane/","title":"OpenStackDataPlane","text":""},{"location":"openstack_dataplane/#custom-resources","title":"Custom Resources","text":"<ul> <li>OpenStackDataPlane</li> </ul>"},{"location":"openstack_dataplane/#sub-resources","title":"Sub Resources","text":"<ul> <li>OpenStackDataPlaneList</li> <li>OpenStackDataPlaneSpec</li> <li>OpenStackDataPlaneStatus</li> </ul>"},{"location":"openstack_dataplane/#openstackdataplane","title":"OpenStackDataPlane","text":"<p>OpenStackDataPlane is the Schema for the openstackdataplanes API</p> Field Description Scheme Required metadata metav1.ObjectMeta false spec OpenStackDataPlaneSpec false status OpenStackDataPlaneStatus false <p>Back to Custom Resources</p>"},{"location":"openstack_dataplane/#openstackdataplanelist","title":"OpenStackDataPlaneList","text":"<p>OpenStackDataPlaneList contains a list of OpenStackDataPlane</p> Field Description Scheme Required metadata metav1.ListMeta false items []OpenStackDataPlane true <p>Back to Custom Resources</p>"},{"location":"openstack_dataplane/#openstackdataplanespec","title":"OpenStackDataPlaneSpec","text":"<p>OpenStackDataPlaneSpec defines the desired state of OpenStackDataPlane</p> Field Description Scheme Required nodes Nodes - Map of nodes map[string]OpenStackDataPlaneNodeSpec false roles Roles - Map of roles map[string]OpenStackDataPlaneRoleSpec false deployStrategy DeployStrategy section to control how the node is deployed DeployStrategySection false <p>Back to Custom Resources</p>"},{"location":"openstack_dataplane/#openstackdataplanestatus","title":"OpenStackDataPlaneStatus","text":"<p>OpenStackDataPlaneStatus defines the observed state of OpenStackDataPlaneNode</p> Field Description Scheme Required conditions Conditions condition.Conditions false deployed Deployed bool false <p>Back to Custom Resources</p>"},{"location":"openstack_dataplanenode/","title":"OpenStackDataPlaneNode","text":""},{"location":"openstack_dataplanenode/#custom-resources","title":"Custom Resources","text":"<ul> <li>OpenStackDataPlaneNode</li> </ul>"},{"location":"openstack_dataplanenode/#sub-resources","title":"Sub Resources","text":"<ul> <li>AnsibleEESpec</li> <li>DeployStrategySection</li> <li>NetworkConfigSection</li> <li>NodeSection</li> <li>NovaTemplate</li> <li>OpenStackDataPlaneNodeList</li> <li>OpenStackDataPlaneNodeSpec</li> </ul>"},{"location":"openstack_dataplanenode/#ansibleeespec","title":"AnsibleEESpec","text":"<p>AnsibleEESpec is a specification of the ansible EE attributes</p> Field Description Scheme Required networkAttachments NetworkAttachments is a list of NetworkAttachment resource names to pass to the ansibleee resource which allows to connect the ansibleee runner to the given network []string false openStackAnsibleEERunnerImage OpenStackAnsibleEERunnerImage image to use as the ansibleEE runner image string false ansibleTags AnsibleTags for ansible execution string false ansibleLimit AnsibleLimit for ansible execution string false ansibleSkipTags AnsibleSkipTags for ansible execution string false extraMounts ExtraMounts containing files which can be mounted into an Ansible Execution Pod []storage.VolMounts false env Env is a list containing the environment variables to pass to the pod []corev1.EnvVar false <p>Back to Custom Resources</p>"},{"location":"openstack_dataplanenode/#deploystrategysection","title":"DeployStrategySection","text":"<p>DeployStrategySection for fields controlling the deployment</p> Field Description Scheme Required deploy Deploy boolean to trigger ansible execution bool true ansibleTags AnsibleTags for ansible execution string false ansibleLimit AnsibleLimit for ansible execution string false ansibleSkipTags AnsibleSkipTags for ansible execution string false <p>Back to Custom Resources</p>"},{"location":"openstack_dataplanenode/#networkconfigsection","title":"NetworkConfigSection","text":"<p>NetworkConfigSection is a specification of the Network configuration details</p> Field Description Scheme Required template Template - Contains a Ansible j2 nic config template to use when applying node network configuration string true <p>Back to Custom Resources</p>"},{"location":"openstack_dataplanenode/#nodesection","title":"NodeSection","text":"<p>NodeSection is a specification of the node attributes</p> Field Description Scheme Required networkConfig NetworkConfig - Network configuration details. Contains os-net-config related properties. NetworkConfigSection true networks Networks - Instance networks []infranetworkv1.IPSetNetwork false managementNetwork ManagementNetwork - Name of network to use for management (SSH/Ansible) string false ansibleUser AnsibleUser SSH user for Ansible connection string false ansiblePort AnsiblePort SSH port for Ansible connection int false ansibleVars AnsibleVars for configuring ansible string false ansibleSSHPrivateKeySecret AnsibleSSHPrivateKeySecret Private SSH Key secret containing private SSH key for connecting to node. Must be of the form: Secret.data.ssh-privatekey:  https://kubernetes.io/docs/concepts/configuration/secret/#ssh-authentication-secrets string false extraMounts ExtraMounts containing files which can be mounted into an Ansible Execution Pod []storage.VolMounts false userData UserData  node specific user-data *corev1.SecretReference false networkData NetworkData  node specific network-data *corev1.SecretReference false nova NovaTemplate specifies the parameters for the compute service deployment on the EDPM node. If it is specified both in OpenstackDataPlaneRole and the OpenstackDataPlaneNode for the same EDPM node then the configuration in OpenstackDataPlaneNode will be used and the configuration in the OpenstackDataPlaneRole will be ignored. If this is defined in neither then compute service(s) will not be deployed on the EDPM node. *NovaTemplate false <p>Back to Custom Resources</p>"},{"location":"openstack_dataplanenode/#novatemplate","title":"NovaTemplate","text":"<p>NovaTemplate specifies the parameters for the compute service deployment on the EDPM node.</p> Field Description Scheme Required cellName CellName is the name of nova cell the compute(s) should be connected to string true novaInstance NovaInstance is the name of the Nova CR that represents the deployment the compute(s) belongs to. You can query the name of the Nova CRs in you system via <code>oc get Nova -o jsonpath='{.items[*].metadata.name}'</code> string true customServiceConfig CustomServiceConfig - customize the nova-compute service config using this parameter to change service defaults, or overwrite rendered information using raw OpenStack config format. The content gets added to to /etc/nova/nova.conf.d directory as 02-nova-override.conf file. string false deploy Deploy true means the compute service(s) are allowed to be changed on the EDPM node(s) if necessary. If set to false then only the pre-requisite data (e.g. config maps) will be generated but no actual modification on the compute node(s) itself will happen. *bool true <p>Back to Custom Resources</p>"},{"location":"openstack_dataplanenode/#openstackdataplanenode","title":"OpenStackDataPlaneNode","text":"<p>OpenStackDataPlaneNode is the Schema for the openstackdataplanenodes API</p> Field Description Scheme Required metadata metav1.ObjectMeta false spec OpenStackDataPlaneNodeSpec false status OpenStackDataPlaneStatus false <p>Back to Custom Resources</p>"},{"location":"openstack_dataplanenode/#openstackdataplanenodelist","title":"OpenStackDataPlaneNodeList","text":"<p>OpenStackDataPlaneNodeList contains a list of OpenStackDataPlaneNode</p> Field Description Scheme Required metadata metav1.ListMeta false items []OpenStackDataPlaneNode true <p>Back to Custom Resources</p>"},{"location":"openstack_dataplanenode/#openstackdataplanenodespec","title":"OpenStackDataPlaneNodeSpec","text":"<p>OpenStackDataPlaneNodeSpec defines the desired state of OpenStackDataPlaneNode</p> Field Description Scheme Required hostName HostName - node name string false node Node - node attributes specific to this node NodeSection false role Role - role name for this node string false ansibleHost AnsibleHost SSH host for Ansible connection string false env Env is a list containing the environment variables to pass to the pod []corev1.EnvVar false deployStrategy DeployStrategy section to control how the node is deployed DeployStrategySection false networkAttachments NetworkAttachments is a list of NetworkAttachment resource names to pass to the ansibleee resource which allows to connect the ansibleee runner to the given network []string false <p>Back to Custom Resources</p>"},{"location":"openstack_dataplanerole/","title":"OpenStackDataPlaneRole","text":""},{"location":"openstack_dataplanerole/#custom-resources","title":"Custom Resources","text":"<ul> <li>OpenStackDataPlaneRole</li> </ul>"},{"location":"openstack_dataplanerole/#sub-resources","title":"Sub Resources","text":"<ul> <li>AnsibleEESpec</li> <li>DeployStrategySection</li> <li>NetworkConfigSection</li> <li>NodeSection</li> <li>NovaTemplate</li> <li>OpenStackDataPlaneRoleList</li> <li>OpenStackDataPlaneRoleSpec</li> </ul>"},{"location":"openstack_dataplanerole/#ansibleeespec","title":"AnsibleEESpec","text":"<p>AnsibleEESpec is a specification of the ansible EE attributes</p> Field Description Scheme Required networkAttachments NetworkAttachments is a list of NetworkAttachment resource names to pass to the ansibleee resource which allows to connect the ansibleee runner to the given network []string false openStackAnsibleEERunnerImage OpenStackAnsibleEERunnerImage image to use as the ansibleEE runner image string false ansibleTags AnsibleTags for ansible execution string false ansibleLimit AnsibleLimit for ansible execution string false ansibleSkipTags AnsibleSkipTags for ansible execution string false extraMounts ExtraMounts containing files which can be mounted into an Ansible Execution Pod []storage.VolMounts false env Env is a list containing the environment variables to pass to the pod []corev1.EnvVar false <p>Back to Custom Resources</p>"},{"location":"openstack_dataplanerole/#deploystrategysection","title":"DeployStrategySection","text":"<p>DeployStrategySection for fields controlling the deployment</p> Field Description Scheme Required deploy Deploy boolean to trigger ansible execution bool true ansibleTags AnsibleTags for ansible execution string false ansibleLimit AnsibleLimit for ansible execution string false ansibleSkipTags AnsibleSkipTags for ansible execution string false <p>Back to Custom Resources</p>"},{"location":"openstack_dataplanerole/#networkconfigsection","title":"NetworkConfigSection","text":"<p>NetworkConfigSection is a specification of the Network configuration details</p> Field Description Scheme Required template Template - Contains a Ansible j2 nic config template to use when applying node network configuration string true <p>Back to Custom Resources</p>"},{"location":"openstack_dataplanerole/#nodesection","title":"NodeSection","text":"<p>NodeSection is a specification of the node attributes</p> Field Description Scheme Required networkConfig NetworkConfig - Network configuration details. Contains os-net-config related properties. NetworkConfigSection true networks Networks - Instance networks []infranetworkv1.IPSetNetwork false managementNetwork ManagementNetwork - Name of network to use for management (SSH/Ansible) string false ansibleUser AnsibleUser SSH user for Ansible connection string false ansiblePort AnsiblePort SSH port for Ansible connection int false ansibleVars AnsibleVars for configuring ansible string false ansibleSSHPrivateKeySecret AnsibleSSHPrivateKeySecret Private SSH Key secret containing private SSH key for connecting to node. Must be of the form: Secret.data.ssh-privatekey:  https://kubernetes.io/docs/concepts/configuration/secret/#ssh-authentication-secrets string false extraMounts ExtraMounts containing files which can be mounted into an Ansible Execution Pod []storage.VolMounts false userData UserData  node specific user-data *corev1.SecretReference false networkData NetworkData  node specific network-data *corev1.SecretReference false nova NovaTemplate specifies the parameters for the compute service deployment on the EDPM node. If it is specified both in OpenstackDataPlaneRole and the OpenstackDataPlaneNode for the same EDPM node then the configuration in OpenstackDataPlaneNode will be used and the configuration in the OpenstackDataPlaneRole will be ignored. If this is defined in neither then compute service(s) will not be deployed on the EDPM node. *NovaTemplate false <p>Back to Custom Resources</p>"},{"location":"openstack_dataplanerole/#novatemplate","title":"NovaTemplate","text":"<p>NovaTemplate specifies the parameters for the compute service deployment on the EDPM node.</p> Field Description Scheme Required cellName CellName is the name of nova cell the compute(s) should be connected to string true novaInstance NovaInstance is the name of the Nova CR that represents the deployment the compute(s) belongs to. You can query the name of the Nova CRs in you system via <code>oc get Nova -o jsonpath='{.items[*].metadata.name}'</code> string true customServiceConfig CustomServiceConfig - customize the nova-compute service config using this parameter to change service defaults, or overwrite rendered information using raw OpenStack config format. The content gets added to to /etc/nova/nova.conf.d directory as 02-nova-override.conf file. string false deploy Deploy true means the compute service(s) are allowed to be changed on the EDPM node(s) if necessary. If set to false then only the pre-requisite data (e.g. config maps) will be generated but no actual modification on the compute node(s) itself will happen. *bool true <p>Back to Custom Resources</p>"},{"location":"openstack_dataplanerole/#openstackdataplanerole","title":"OpenStackDataPlaneRole","text":"<p>OpenStackDataPlaneRole is the Schema for the openstackdataplaneroles API</p> Field Description Scheme Required metadata metav1.ObjectMeta false spec OpenStackDataPlaneRoleSpec false status OpenStackDataPlaneStatus false <p>Back to Custom Resources</p>"},{"location":"openstack_dataplanerole/#openstackdataplanerolelist","title":"OpenStackDataPlaneRoleList","text":"<p>OpenStackDataPlaneRoleList contains a list of OpenStackDataPlaneRole</p> Field Description Scheme Required metadata metav1.ListMeta false items []OpenStackDataPlaneRole true <p>Back to Custom Resources</p>"},{"location":"openstack_dataplanerole/#openstackdataplanerolespec","title":"OpenStackDataPlaneRoleSpec","text":"<p>OpenStackDataPlaneRoleSpec defines the desired state of OpenStackDataPlaneRole</p> Field Description Scheme Required dataPlane DataPlane name of OpenStackDataPlane for this role string false baremetalSetTemplate BaremetalSetTemplate Template for BaremetalSet for the Role baremetalv1.OpenStackBaremetalSetSpec false nodeTemplate NodeTemplate - node attributes specific to this roles NodeSection false preProvisioned \\n\\nPreProvisioned - Whether the nodes are actually pre-provisioned (True) or should be preprovisioned (False) bool false env Env is a list containing the environment variables to pass to the pod []corev1.EnvVar false deployStrategy DeployStrategy section to control how the node is deployed DeployStrategySection false networkAttachments NetworkAttachments is a list of NetworkAttachment resource names to pass to the ansibleee resource which allows to connect the ansibleee runner to the given network []string false services Services list []string true <p>Back to Custom Resources</p>"},{"location":"openstack_dataplaneservice/","title":"OpenStackDataPlaneService","text":""},{"location":"openstack_dataplaneservice/#custom-resources","title":"Custom Resources","text":"<ul> <li>OpenStackDataPlaneService</li> </ul>"},{"location":"openstack_dataplaneservice/#sub-resources","title":"Sub Resources","text":"<ul> <li>AnsibleEESpec</li> <li>DeployStrategySection</li> <li>NetworkConfigSection</li> <li>NodeSection</li> <li>NovaTemplate</li> <li>OpenStackDataPlaneServiceList</li> <li>OpenStackDataPlaneServiceSpec</li> <li>OpenStackDataPlaneServiceStatus</li> </ul>"},{"location":"openstack_dataplaneservice/#ansibleeespec","title":"AnsibleEESpec","text":"<p>AnsibleEESpec is a specification of the ansible EE attributes</p> Field Description Scheme Required networkAttachments NetworkAttachments is a list of NetworkAttachment resource names to pass to the ansibleee resource which allows to connect the ansibleee runner to the given network []string false openStackAnsibleEERunnerImage OpenStackAnsibleEERunnerImage image to use as the ansibleEE runner image string false ansibleTags AnsibleTags for ansible execution string false ansibleLimit AnsibleLimit for ansible execution string false ansibleSkipTags AnsibleSkipTags for ansible execution string false extraMounts ExtraMounts containing files which can be mounted into an Ansible Execution Pod []storage.VolMounts false env Env is a list containing the environment variables to pass to the pod []corev1.EnvVar false <p>Back to Custom Resources</p>"},{"location":"openstack_dataplaneservice/#deploystrategysection","title":"DeployStrategySection","text":"<p>DeployStrategySection for fields controlling the deployment</p> Field Description Scheme Required deploy Deploy boolean to trigger ansible execution bool true ansibleTags AnsibleTags for ansible execution string false ansibleLimit AnsibleLimit for ansible execution string false ansibleSkipTags AnsibleSkipTags for ansible execution string false <p>Back to Custom Resources</p>"},{"location":"openstack_dataplaneservice/#networkconfigsection","title":"NetworkConfigSection","text":"<p>NetworkConfigSection is a specification of the Network configuration details</p> Field Description Scheme Required template Template - Contains a Ansible j2 nic config template to use when applying node network configuration string true <p>Back to Custom Resources</p>"},{"location":"openstack_dataplaneservice/#nodesection","title":"NodeSection","text":"<p>NodeSection is a specification of the node attributes</p> Field Description Scheme Required networkConfig NetworkConfig - Network configuration details. Contains os-net-config related properties. NetworkConfigSection true networks Networks - Instance networks []infranetworkv1.IPSetNetwork false managementNetwork ManagementNetwork - Name of network to use for management (SSH/Ansible) string false ansibleUser AnsibleUser SSH user for Ansible connection string false ansiblePort AnsiblePort SSH port for Ansible connection int false ansibleVars AnsibleVars for configuring ansible string false ansibleSSHPrivateKeySecret AnsibleSSHPrivateKeySecret Private SSH Key secret containing private SSH key for connecting to node. Must be of the form: Secret.data.ssh-privatekey:  https://kubernetes.io/docs/concepts/configuration/secret/#ssh-authentication-secrets string false extraMounts ExtraMounts containing files which can be mounted into an Ansible Execution Pod []storage.VolMounts false userData UserData  node specific user-data *corev1.SecretReference false networkData NetworkData  node specific network-data *corev1.SecretReference false nova NovaTemplate specifies the parameters for the compute service deployment on the EDPM node. If it is specified both in OpenstackDataPlaneRole and the OpenstackDataPlaneNode for the same EDPM node then the configuration in OpenstackDataPlaneNode will be used and the configuration in the OpenstackDataPlaneRole will be ignored. If this is defined in neither then compute service(s) will not be deployed on the EDPM node. *NovaTemplate false <p>Back to Custom Resources</p>"},{"location":"openstack_dataplaneservice/#novatemplate","title":"NovaTemplate","text":"<p>NovaTemplate specifies the parameters for the compute service deployment on the EDPM node.</p> Field Description Scheme Required cellName CellName is the name of nova cell the compute(s) should be connected to string true novaInstance NovaInstance is the name of the Nova CR that represents the deployment the compute(s) belongs to. You can query the name of the Nova CRs in you system via <code>oc get Nova -o jsonpath='{.items[*].metadata.name}'</code> string true customServiceConfig CustomServiceConfig - customize the nova-compute service config using this parameter to change service defaults, or overwrite rendered information using raw OpenStack config format. The content gets added to to /etc/nova/nova.conf.d directory as 02-nova-override.conf file. string false deploy Deploy true means the compute service(s) are allowed to be changed on the EDPM node(s) if necessary. If set to false then only the pre-requisite data (e.g. config maps) will be generated but no actual modification on the compute node(s) itself will happen. *bool true <p>Back to Custom Resources</p>"},{"location":"openstack_dataplaneservice/#openstackdataplaneservice","title":"OpenStackDataPlaneService","text":"<p>OpenStackDataPlaneService is the Schema for the openstackdataplaneservices API</p> Field Description Scheme Required metadata metav1.ObjectMeta false spec OpenStackDataPlaneServiceSpec false status OpenStackDataPlaneServiceStatus false <p>Back to Custom Resources</p>"},{"location":"openstack_dataplaneservice/#openstackdataplaneservicelist","title":"OpenStackDataPlaneServiceList","text":"<p>OpenStackDataPlaneServiceList contains a list of OpenStackDataPlaneService</p> Field Description Scheme Required metadata metav1.ListMeta false items []OpenStackDataPlaneService true <p>Back to Custom Resources</p>"},{"location":"openstack_dataplaneservice/#openstackdataplaneservicespec","title":"OpenStackDataPlaneServiceSpec","text":"<p>OpenStackDataPlaneServiceSpec defines the desired state of OpenStackDataPlaneService</p> Field Description Scheme Required label Label to use for service string false play Play is the playbook contents that ansible will run on execution. If both Play and Role are specified, Play takes precedence string false role Role is the description of an Ansible Role *ansibleeev1.Role false openStackAnsibleEERunnerImage OpenStackAnsibleEERunnerImage image to use as the ansibleEE runner image string false <p>Back to Custom Resources</p>"},{"location":"openstack_dataplaneservice/#openstackdataplaneservicestatus","title":"OpenStackDataPlaneServiceStatus","text":"<p>OpenStackDataPlaneServiceStatus defines the observed state of OpenStackDataPlaneService</p> Field Description Scheme Required conditions Conditions condition.Conditions false <p>Back to Custom Resources</p>"}]}